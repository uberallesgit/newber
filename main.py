from data.RDB import RDB
import os
import openpyxl
import requests
import telebot
import time
from telebot import types
from datetime import datetime, timedelta

FLASH = "6469267374:AAGpqOURKiovrWksfOoDwE57bqNC1Eh1h48"
CURRENT_BOT = FLASH
bot = telebot.TeleBot(CURRENT_BOT)

cwd = os.getcwd()
print(cwd)

current_outer_time = datetime.now().strftime('%d.%m.%Y %H:%M')
# time_to_arrive = (datetime.now() + timedelta(hours=2)).strftime('%d.%m.%Y %H:%M')
print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤", current_outer_time)
organization = ""
bs_name = ""
address = ""
coordinates = ""
order_type = ""
job_type = ""
job_description = ""
ustk_job_description = ""
job_description_list = []
ustk_job_description_list = []
workers_list = []
job_list = ["–ê–í–†", "–î–ì–£", "–ü–ü–†", "–¢–û", "–†–∞–±–æ—Ç—ã –ø–æ –∑–∞–¥–∞–Ω–∏—é", "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"]
ustk_job_list = ["–ê–í–†", "–î–ì–£", "–ü–ü–†", "–¢–û", "–†–∞–±–æ—Ç—ã –ø–æ –∑–∞–¥–∞–Ω–∏—é", "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"]
worker = ""
partner1 = ""
partner2 = ""
crwo = ""
request = ""
mult_bs_list = []
multi_coordinates_list = []
multi_address_list = []
file_PATH = ""
workers_PATH = ""
PO = "–ü–û–î–†–Ø–î–ß–ò–ö"
MM = "–ú–ò–†"


def add_preffix(bs_name):
    preffix = (4-len(bs_name))*"0"
    bs_name = "CR" + preffix + bs_name
    if not bs_name in RDB:
        bs_name = bs_name.replace("CR", "SE")
    return bs_name


#–≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=["cmdlist"])
def add_worker(message):
    bot.send_message(message.chat.id, "/addworker-–¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n/addjd-–¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç –ú–ú\n"
                                      "/addjdu-–¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç –Æ–°–¢–ö\n"
                                      "/addjd-–¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç\n"
                                      "/jdfile- –≤—ã–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ —Ä–∞–±–æ—Ç –∏–Ω–∂–µ–Ω–µ—Ä–∞–º –ú–∏—Ä–∞–Ω–¥–∞-–ú–µ–¥–∏–∞\n"
                                      "/jdufile- –≤—ã–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ —Ä–∞–±–æ—Ç –Æ–°–¢–ö\n"
                                      "/del_worker -—É–¥–∞–ª–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n"
                                      "/del_jd -—É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –ú–ú\n"
                                      "/del_jd_u -—É–¥–∞–ª–∏—Ç—å  –∑–∞–¥–∞–Ω–∏–µ –Æ–°–¢–ö\n"
                                      "/printwl -–ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n"
                                      "/wfile -–≤—ã–≥—Ä—É–∑–∏—Ç—å  —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n"
                                      "/allfiles -–≤—ã–≥—Ä—É–∑–∏—Ç—å   –≤—Å–µ —Å–ø–∏—Å–∫–∏ —Ñ–∞–π–ª–∞–º–∏\n"
                                      "/destroy_it_all -—É–¥–∞–ª–∏—Ç—å –≤—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —Å—Ç–µ—Ä–µ—Ç—å –∫–æ–¥, –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è.")

    ######–≤—ã–≥—Ä—É–∑–∏—Ç—å  –≤—Å–µ —Å–ø–∏—Å–∫–∏  –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–æ–≤  ######
@bot.message_handler(commands=["allfiles"])
def all_files(message):
    bot.send_document(message.chat.id, open(rf"data/workers/workers.txt", 'rb'))
    bot.send_document(message.chat.id, open(rf"data/jd/job_description.txt", 'rb'))
    bot.send_document(message.chat.id, open(rf"data/jd/ustk_job_description.txt", 'rb'))

    #–≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –≤–∏–¥–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
@bot.message_handler(commands=["wfile"])
def wfile(message):
    bot.send_document(message.chat.id, open(rf"data/workers/workers.txt", 'rb'))

    ####### –≤—ã–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è  –º–∏—Ä–∞–Ω–¥—ã


@bot.message_handler(commands=["jdfile"])
def jdfile(message):
    bot.send_document(message.chat.id, open(rf"data/jd/job_description.txt", 'rb'))

@bot.message_handler(commands=["jdufile"])
def jdufile(message):
    bot.send_document(message.chat.id, open(rf"data/jd/ustk_job_description.txt", 'rb'))


#–≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
@bot.message_handler(commands=["printwl"])
def printwl(message):
    with open(f"data/workers/workers.txt","r",encoding="utf-8") as file:
        c = 0
        s = ""
        for worker in sorted(file):
            c += 1
            number = str(c)
            s = s+number+"."+worker+"\n"
        bot.send_message(message.chat.id, s)

# –£–ù–ò–ß–¢–û–ñ–ò–¢–¨ –í–°–Å
@bot.message_handler(commands=["destroy_it_all"])
def destroy_it_all(message):
    enemy_time = datetime.now().strftime("%d_%m")
    with open(f"enemies/{enemy_time}.txt", "a") as file:
        file.write(f"{message.from_user.first_name} {message.from_user.last_name}\n")
    bot.send_message(message.chat.id, f"–í–Ω–∏–º–∞–Ω–∏–µ –≤—Å–µ–º! —Å—Ä–µ–¥–∏ –Ω–∞—Å –∫—Ä—ã—Å–∞! –ò –µ–µ –∏–º—è {message.from_user.last_name} {message.from_user.first_name}")
    time.sleep(2)
    bot.send_message(message.chat.id, "üñï")

#–¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
@bot.message_handler(commands=["addworker"])
def add_worker(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –§–∞–º–∏–ª–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
    bot.register_next_step_handler(message, add_new_worker)


def add_new_worker(message):
    if len(message.text.split()) > 1:
        for name in range(len(message.text.split())):
            worker = message.text.split()[name]
            with open(f"data/workers/workers.txt", "a",encoding="utf-8") as file:
                file.write(worker.capitalize() + "\n")
                bot.send_message(message.chat.id, f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {worker.capitalize()} –¥–æ–±–∞–≤–ª–µ–Ω")
    else:
        worker = message.text
        with open(f"data/workers/workers.txt", "a",encoding="utf-8") as file:
            file.write(worker.capitalize() + "\n")
            bot.send_message(message.chat.id, f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {worker.capitalize()} –¥–æ–±–∞–≤–ª–µ–Ω")

#–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
@bot.message_handler(commands=["addjd"])
def add_worker(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç")
    bot.register_next_step_handler(message, add_job_description)


def add_job_description(message):
    if len(message.text.split()) > 1:
        for job in range(len(message.text.split("/*"))):
            job_descr = message.text.split("/*")[job].strip()
            with open(f"data/jd/job_description.txt", "a", encoding="utf-8") as file:
                file.write(job_descr + "\n")
                bot.send_message(message.chat.id, f"–û–ø–∏—Å–∞–Ω–∏–µ '{job_descr[:15]}...' –¥–æ–±–∞–≤–ª–µ–Ω–æ")
    else:
        job_descr = message.text
        with open(f"data/jd/job_description.txt", "a") as file:
            file.write(job_descr.capitalize() + "\n")
            bot.send_message(message.chat.id, f"–û–ø–∏—Å–∞–Ω–∏–µ '{job_descr[:15]}...' –¥–æ–±–∞–≤–ª–µ–Ω–æ")

#–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Æ–°–¢–ö
@bot.message_handler(commands=["addjdu"])
def add_worker(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç")
    bot.register_next_step_handler(message, add_ustk_job_description)


def add_ustk_job_description(message):
    if len(message.text.split()) > 1:
        for job in range(len(message.text.split("/*"))):
            job_descr = message.text.split("/*")[job].strip()
            with open(f"data/jd/ustk_job_description.txt", "a",encoding="utf-8") as file:
                file.write(job_descr + "\n")
                bot.send_message(message.chat.id, f"–û–ø–∏—Å–∞–Ω–∏–µ '{job_descr[:15]}...' –¥–æ–±–∞–≤–ª–µ–Ω–æ")
    else:
        job_descr = message.text
        with open(f"data/jd/ustk_job_description.txt", "a",encoding="utf-8") as file:
            file.write(job_descr.capitalize() + "\n")
            bot.send_message(message.chat.id, f"–û–ø–∏—Å–∞–Ω–∏–µ '{job_descr[:15]}...' –¥–æ–±–∞–≤–ª–µ–Ω–æ")

#–£–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
@bot.message_handler(commands=["del_worker"])
def add_worker(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —Ñ–∞–º–∏–ª–∏—é —É–¥–∞–ª—è–µ–º–æ–≥–æ: ")
    bot.register_next_step_handler(message, del_worker)

def del_worker(message):
    with open(f"data/workers/workers.txt", "r",encoding="utf-8") as file:
        a = []
        for worker in file:
            a.append(worker.rstrip("\n"))
        if message.text.strip().capitalize() not in a:
            bot.send_message(message.chat.id,
                             "–¢–∞–∫–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –∏ –≤ –ø–æ–º–∏–Ω–µ –Ω–µ—Ç,–ø–æ—Ö–æ–∂–µ —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã '—á–µ—Ä–µ–∑ –∂–æ–ø—É', —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑- –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /del_worker —Å–Ω–æ–≤–∞.")
            bot.send_message(message.chat.id, "ü§∑üèª‚Äç‚ôÇÔ∏è")
        else:
            a.remove(message.text.strip().capitalize())
            print(a)
            with open(f"data/workers/workers.txt", "w",encoding="utf-8") as file:
                for worker in a:
                    file.write(worker + "\n")
                bot.send_message(message.chat.id, f"–†–∞–±–æ—Ç–Ω–∏–∫ {message.text.strip().capitalize()} –±—ã–ª —É–¥–∞–ª–µ–Ω")

#—É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
@bot.message_handler(commands=["del_jd"])
def add_worker(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏–∑ —á–∞—Ç–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ..)")
    bot.register_next_step_handler(message, del_jd)


def del_jd(message):
    with open(f"data/jd/job_description.txt", "r",encoding="utf-8") as file:
        a = []
        for job in file:
            a.append(job.rstrip("\n"))
        if message.text.strip() not in a:
            bot.send_message(message.chat.id,
                             "–¢–∞–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è  –≤ —Å–ø–∏—Å–∫–µ –Ω–µ—Ç,–ø–æ—Ö–æ–∂–µ —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã '—á–µ—Ä–µ–∑ –∂–æ–ø—É', —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑- –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /del_jd —Å–Ω–æ–≤–∞.")
            bot.send_message(message.chat.id, "ü§∑üèª‚Äç‚ôÇÔ∏è")
        else:
            a.remove(message.text.strip())
            print(a)
            with open(f"data/jd/job_description.txt", "w",encoding="utf-8") as file:
                for job in a:
                    file.write(job + "\n")
                bot.send_message(message.chat.id, f"–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è '{message.text.strip()[:15]}' –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ")

#—É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Æ–°–¢–ö
@bot.message_handler(commands=["del_jd_u"])
def add_worker(message):
    bot.send_message(message.chat.id,
                     "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–¥—Ä—è–¥—á–∏–∫—É, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏–∑ —á–∞—Ç–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ..)")
    bot.register_next_step_handler(message, del_jd_u)


def del_jd_u(message):
    with open(f"data/jd/ustk_job_description.txt", "r",encoding="utf-8") as file:
        a = []
        for job in file:
            a.append(job.rstrip("\n"))
        if message.text.strip() not in a:
            bot.send_message(message.chat.id,
                             "–¢–∞–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è  –≤ —Å–ø–∏—Å–∫–µ –Ω–µ—Ç,–ø–æ—Ö–æ–∂–µ —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã '—á–µ—Ä–µ–∑ –∂–æ–ø—É', —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑- –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /del_jd —Å–Ω–æ–≤–∞.")
            bot.send_message(message.chat.id, "ü§∑üèª‚Äç‚ôÇÔ∏è")
        else:
            a.remove(message.text.strip())
            print(a)
            with open(f"data/jd/ustk_job_description.txt", "w",encoding="utf-8") as file:
                for job in a:
                    file.write(job + "\n")
                bot.send_message(message.chat.id,
                                 f"–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–¥—Ä—è–¥—á–∏–∫–∞.'{message.text.strip()[:15]}' –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ")


#–ö–æ–¥ –æ—Å–Ω–æ–≤–Ω–æ–π
#################################################################
@bot.message_handler()
def start(message):
    global bs_name
    global multi_bs_list
    global multi_coordinates_list
    global multi_address_list


#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ë–°, –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
#—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —à–µ—Å—Ç–∏–∑–Ω–∞—á–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ë–° –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ–∂–¥—É DR,LR,UH –∏ UZ

    if len(message.text.split()) > 1:
        multi_bs_list = []
        multi_address_list = []
        multi_coordinates_list = []
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        miranda_button = types.KeyboardButton(f"{MM}")
        ustk_button = types.KeyboardButton(f"{PO}")
        markup.add(miranda_button, ustk_button)
        for bs in message.text.upper().split():
            bs_name = bs
            if not bs_name in RDB:
                bs_name = add_preffix(bs_name)
            multi_bs_list.append(bs_name)
            multi_coordinates_list.append(RDB[bs_name]["coordinates"])
            multi_address_list.append(RDB[bs_name]["address"])
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é", reply_markup=markup)
        bot.register_next_step_handler(message, multi_process_miranda)

    else:
        bs_name = message.text.upper()
        if not bs_name in RDB:
            bs_name = add_preffix(bs_name)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        miranda_button = types.KeyboardButton(f"{MM}")
        ustk_button = types.KeyboardButton(f"{PO}")
        markup.add(miranda_button, ustk_button)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é", reply_markup=markup)
        bot.register_next_step_handler(message, process_miranda)
def multi_process_miranda(message):
    global job_list
    if message.text == f"{MM}":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for job in job_list:
            markup.add(job)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ä–∞–±–æ—Ç", reply_markup=markup)
        bot.register_next_step_handler(message, multi_process_job_list)
    elif message.text == f"{PO}":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for job in ustk_job_list:
            markup.add(job)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∑–∞–¥–∞—á –ø–æ–¥—Ä—è–¥—á–∏–∫—É", reply_markup=markup)
        bot.register_next_step_handler(message, multi_process_ustk_job_list)

def multi_process_ustk_job_list(message):
    ustk_job_description_list = []
    with open(f"data/jd/ustk_job_description.txt", "r",encoding="utf-8") as file:
        for jd in file:
            ustk_job_description_list.append(jd.rstrip("\n"))
    global ustk_job_type
    global ustk_job_description
    if message.text in job_list:
        ustk_job_type = message.text
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        own_jd = types.KeyboardButton("–°–≤–æ–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è")
        markup.add(own_jd)
        for job_des in sorted(ustk_job_description_list):
            markup.add(job_des)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç", reply_markup=markup)
        bot.register_next_step_handler(message, multi_get_ustk_job_description)

def multi_get_ustk_job_description(message):
    global job_description_list
    global job_description
    if message.text == "–°–≤–æ–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è":
        bot.send_message(message.chat.id,"–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è :   ")
        bot.register_next_step_handler(message, make_own_multi_jdu)
    else:

        job_description = message.text
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä CRWO :")
        bot.register_next_step_handler(message, multi_get_ustk_crwo)

def make_own_multi_jdu(message):
    global job_description
    job_description = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä CRWO :")
    bot.register_next_step_handler(message, multi_get_ustk_crwo)

def multi_get_ustk_crwo(message):

    global crwo
    global multi_bs_list
    global multi_coordinates_list
    global multi_address_list

    current_log_time = datetime.now().strftime('%d.%m.%Y')
    crwo = message.text
    print("CRWO000000", crwo)
    global job_type
    crwo_delta = 0
    print("multi_bs_list=",multi_bs_list)
    for i in range(len(multi_bs_list)):
        bs_name = multi_bs_list[i]
        coordinates = multi_coordinates_list[i]
        address = multi_address_list[i]
        current_time = (datetime.now() + timedelta(hours=3)).strftime('%d.%m.%Y %H:%M')
        time_to_arrive = ((datetime.now() + timedelta(hours=2))+timedelta(hours=3)).strftime('%d.%m.%Y %H:%M')
        bot.send_message(message.chat.id, f"CRWO00000{str(int(crwo) + crwo_delta)} / {bs_name}\n"
                                          f"–ê–¥—Ä–µ—Å: {address}\n"
                                          f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {coordinates}\n"
                                          f"–¢–∏–ø —Ä–∞–±–æ—Ç: {ustk_job_type}\n"
                                          f"–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç: {job_description}\n"
                                          f"–î–∞—Ç–∞/–≤—Ä–µ–º—è –≤—ã–¥–∞—á–∏ –∑–∞–¥–∞–Ω–∏—è: {current_time}\n"
                                          f"–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: {time_to_arrive}\n"
                                          f"–ü–æ–¥—Ä—è–¥–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è :{PO}:\n"
                                          f"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –ú–ú : {message.from_user.last_name}\n"
                         )
        crwo_delta += 1
        with open(f"data/logs/{current_log_time}.txt", "a") as file:
            file.write(f"{message.from_user.last_name} —Å–æ–∑–¥–∞–≤–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –ë–° {bs_name} –≤ {datetime.now().strftime('%H:%M')}\n")
        print(f"{message.from_user.last_name} —Å–æ–∑–¥–∞–≤–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –ë–° {bs_name} –≤ {datetime.now().strftime('%H:%M')}\n")

def multi_process_job_list(message):
    global job_description_list
    global job_type
    job_description_list = []
    with open(f"data/jd/job_description.txt", "r",encoding="utf-8") as file:
        for jd in file:
            job_description_list.append(jd.rstrip("\n"))
    if message.text in job_list:
        job_type = message.text
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        own_jd = types.KeyboardButton("–°–≤–æ–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è")
        markup.add(own_jd)
        for job_des in sorted(job_description_list):
            markup.add(job_des)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç", reply_markup=markup)
        # bot.register_next_step_handler(message,get_job_description)
        # job_description = message.text
        print("–∑–∞–¥–∞—á–∞ ", message.text)
        bot.register_next_step_handler(message, multi_choose_worker)

def multi_choose_worker(message):
    global job_description_list
    global job_description
    if message.text == "–°–≤–æ–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è":
        if message.text == "–°–≤–æ–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è":
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è :   ")
            bot.register_next_step_handler(message, make_own_multi)

    elif message.text in job_description_list:
        workers_list = []
        with open(f"data/workers/workers.txt", "r",encoding="utf-8") as file:
            for employee in file:
                workers_list.append(employee.rstrip("\n"))

        global job_description
        job_description = message.text
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        worker_counter = 1
        for worker in sorted(workers_list):
            j = types.KeyboardButton(worker)
            markup.add(j)
            worker_counter += 1
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∏–Ω–∂–µ–Ω–µ—Ä–∞", reply_markup=markup)
        bot.register_next_step_handler(message, multi_get_partner)

def make_own_multi(message):
    global job_description
    job_description = message.text
    workers_list = []
    with open(f"data/workers/workers.txt", "r",encoding="utf-8") as file:
        for employee in file:
            workers_list.append(employee.rstrip("\n"))
    job_description = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    worker_counter = 1
    for worker in sorted(workers_list):
        j = types.KeyboardButton(worker)
        markup.add(j)
        worker_counter += 1
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∏–Ω–∂–µ–Ω–µ—Ä–∞", reply_markup=markup)
    bot.register_next_step_handler(message, multi_get_partner)

def multi_get_partner(message):
    workers_list = []
    with open(f"data/workers/workers.txt", "r",encoding="utf-8") as file:
        for employee in file:
            workers_list.append(employee.rstrip("\n"))

    global partner1
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    worker_counter = 1
    for worker in sorted(workers_list):
        j = types.KeyboardButton(worker)
        markup.add(j)
        worker_counter += 1
    bot.send_message(message.chat.id, "–ü–µ—Ä–≤—ã–π –∏–Ω–∂–µ–Ω–µ—Ä –≤—ã–±—Ä–∞–Ω, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≤—Ç–æ—Ä–æ–≥–æ", reply_markup=markup)
    partner1 = message.text
    bot.register_next_step_handler(message, multi_get_another_partner)
    print(partner1)

def multi_get_another_partner(message):
    bot.send_message(message.chat.id,
                     "–û—Ç–ª–∏—á–Ω–æ, –∫–æ–º–∞–Ω–¥–∞ –≥–æ—Ç–æ–≤–∞! ")
    global partner2
    partner2 = message.text
    print(partner2)
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä CRWO")
    bot.register_next_step_handler(message, multi_input_crwo)

def multi_input_crwo(message):
    global crwo
    global multi_bs_list
    global multi_coordinates_list
    global multi_address_list
    global job_type
    global crwo_delta
    print("multibslist",multi_bs_list)

    current_log_time = datetime.now().strftime('%d.%m.%Y')
    crwo = message.text
    print("CRWO000000", crwo)
    crwo_delta = 0

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    single_wo = types.KeyboardButton("–ï–¥–∏–Ω–æ–π –∑–∞—è–≤–∫–æ–π")
    multi_wo = types.KeyboardButton("–†–∞–∑–¥–µ–ª—å–Ω—ã–º–∏ –∑–∞—è–≤–∫–∞–º–∏")
    markup.add(single_wo, multi_wo)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –ø–æ–¥–∞—á–∏", reply_markup=markup)
    bot.register_next_step_handler(message, multi_choose_style)

def multi_choose_style(message):
    crwo_delta = 0
    global crwo
    global multi_bs_list
    print("multibslist=",multi_bs_list)
    current_log_time = datetime.now().strftime('%d.%m.%Y')

    if message.text == "–†–∞–∑–¥–µ–ª—å–Ω—ã–º–∏ –∑–∞—è–≤–∫–∞–º–∏":
        for i in range(len(multi_bs_list)):
            bs_name = multi_bs_list[i]
            coordinates = multi_coordinates_list[i]
            address = multi_address_list[i]
            current_time = (datetime.now() + timedelta(hours=3)).strftime('%d.%m.%Y %H:%M')
            time_to_arrive = ((datetime.now() + timedelta(hours=2)) + timedelta(hours=3)).strftime('%d.%m.%Y %H:%M')
            bot.send_message(message.chat.id, f"CRWO00000{str(int(crwo) + crwo_delta)} / {bs_name}\n"
                                              f"–ê–¥—Ä–µ—Å: {address}\n"
                                              f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {coordinates}\n"
                                              f"–¢–∏–ø —Ä–∞–±–æ—Ç: {job_type}\n"
                                              f"–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç: {job_description}\n"
                                              f"–î–∞—Ç–∞/–≤—Ä–µ–º—è –≤—ã–¥–∞—á–∏ –∑–∞–¥–∞–Ω–∏—è: {current_time}\n"
                                              f"–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: {time_to_arrive}\n"
                                              f"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –ú–ú : {partner1},{partner2}")
            crwo_delta += 1

        with open(f"data/logs/{current_log_time}.txt", "a") as file:
            file.write(
                f"{message.from_user.last_name} —Å–æ–∑–¥–∞–≤–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –ë–° {','.join(multi_bs_list)} –≤ {datetime.now().strftime('%H:%M')}\n")
        print(
            f"{message.from_user.last_name} —Å–æ–∑–¥–∞–≤–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –ë–° {','.join(multi_bs_list)} –≤ {datetime.now().strftime('%H:%M')}, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–Ω–µ—Å–µ–Ω–∞ –≤ {current_log_time}.txt")

    elif message.text == "–ï–¥–∏–Ω–æ–π –∑–∞—è–≤–∫–æ–π":
        bs_name = ", ".join(multi_bs_list)
        # coordinates = ",".join(multi_coordinates_list)
        # address = multi_address_list[i]
        current_time = (datetime.now() + timedelta(hours=3)).strftime('%d.%m.%Y %H:%M')
        time_to_arrive = ((datetime.now() + timedelta(hours=2)) + timedelta(hours=3)).strftime('%d.%m.%Y %H:%M')
        bot.send_message(message.chat.id, f"CRWO00000{str(int(crwo) + crwo_delta)} / {bs_name}\n"
        # f"–ê–¥—Ä–µ—Å: {address}\n"
        # f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {coordinates}\n"
                                          f"–¢–∏–ø —Ä–∞–±–æ—Ç: {job_type}\n"
                                          f"–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç: {job_description}\n"
                                          f"–î–∞—Ç–∞/–≤—Ä–µ–º—è –≤—ã–¥–∞—á–∏ –∑–∞–¥–∞–Ω–∏—è: {current_time}\n"
                                          f"–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: {time_to_arrive}\n"
                                          f"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –ú–ú : {partner1},{partner2}")

        with open(f"data/logs/{current_log_time}.txt", "a") as file:
            file.write(
                f"{message.from_user.last_name} —Å–æ–∑–¥–∞–≤–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –ë–° {bs_name} –≤ {datetime.now().strftime('%H:%M')}\n")
        print(
            f"{message.from_user.last_name} —Å–æ–∑–¥–∞–≤–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –ë–° {bs_name} –≤ {datetime.now().strftime('%H:%M')}, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–Ω–µ—Å–µ–Ω–∞ –≤ {current_log_time}.txt")


def process_miranda(message):
    global job_list
    if message.text == f"{MM}":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for job in job_list:
            markup.add(job)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ä–∞–±–æ—Ç", reply_markup=markup)
        bot.register_next_step_handler(message, process_job_list)
    elif message.text == f"{PO}":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        # back = types.KeyboardButton("<–ù–ê–ó–ê–î")
        # markup.add(back)
        for job in ustk_job_list:
            markup.add(job)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∑–∞–¥–∞—á –ø–æ–¥—Ä—è–¥—á–∏–∫—É", reply_markup=markup)
        bot.register_next_step_handler(message, process_ustk_job_list)

def process_job_list(message):
    global job_description_list
    global job_type
    job_description_list = []
    with open(f"data/jd/job_description.txt", "r",encoding="utf-8") as file:
        for jd in file:
            job_description_list.append(jd.rstrip("\n"))

    if message.text in job_list:
        job_type = message.text
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        own_jd = types.KeyboardButton("–°–≤–æ–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è")
        markup.add(own_jd)
        for job_des in sorted(job_description_list):
            markup.add(job_des)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç", reply_markup=markup)
        # bot.register_next_step_handler(message,get_job_description)
        # job_description = message.text
        print("–∑–∞–¥–∞—á–∞ ", message.text)
        bot.register_next_step_handler(message, choose_worker)


def choose_worker(message):
    global job_description_list
    global job_description
    if message.text == "–°–≤–æ–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è :   ")
        bot.register_next_step_handler(message, make_own)

    elif message.text in job_description_list:
        workers_list = []
        with open(f"data/workers/workers.txt", "r",encoding="utf-8") as file:
            for employee in file:
                workers_list.append(employee.rstrip("\n"))
        job_description = message.text
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        worker_counter = 1
        for worker in sorted(workers_list):
            j = types.KeyboardButton(worker)
            markup.add(j)
            worker_counter += 1
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∏–Ω–∂–µ–Ω–µ—Ä–∞", reply_markup=markup)
        bot.register_next_step_handler(message, get_partner)

def make_own(message):
    global job_description
    job_description = message.text
    workers_list = []
    with open(f"data/workers/workers.txt", "r",encoding="utf-8") as file:
        for employee in file:
            workers_list.append(employee.rstrip("\n"))
    job_description = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    worker_counter = 1
    for worker in sorted(workers_list):
        j = types.KeyboardButton(worker)
        markup.add(j)
        worker_counter += 1
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∏–Ω–∂–µ–Ω–µ—Ä–∞", reply_markup=markup)
    bot.register_next_step_handler(message, get_partner)


def get_partner(message):
    workers_list = []
    with open(f"data/workers/workers.txt", "r",encoding="utf-8") as file:
        for employee in file:
            workers_list.append(employee.rstrip("\n"))

    global partner1
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    worker_counter = 1
    for worker in sorted(workers_list):
        j = types.KeyboardButton(worker)
        markup.add(j)
        worker_counter += 1
    bot.send_message(message.chat.id, "–ü–µ—Ä–≤—ã–π –∏–Ω–∂–µ–Ω–µ—Ä –≤—ã–±—Ä–∞–Ω, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≤—Ç–æ—Ä–æ–≥–æ", reply_markup=markup)
    partner1 = message.text
    bot.register_next_step_handler(message, get_another_partner)
    print(partner1)


def process_ustk_job_list(message):
    ustk_job_description_list = []
    with open(f"data/jd/ustk_job_description.txt", "r",encoding="utf-8") as file:
        for jd in file:
            ustk_job_description_list.append(jd.rstrip("\n"))
    global ustk_job_type
    global ustk_job_description
    if message.text in job_list:
        ustk_job_type = message.text
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        own_jd = types.KeyboardButton("–°–≤–æ–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è")
        markup.add(own_jd)
        for job_des in sorted(ustk_job_description_list):
            markup.add(job_des)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç", reply_markup=markup)
        bot.register_next_step_handler(message, get_ustk_job_description)


def get_ustk_job_description(message):
    global job_description_list
    global job_description
    # if message.text in job_description_list:
    if message.text == "–°–≤–æ–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è :   ")
        bot.register_next_step_handler(message, make_own_jdu)
    else:
        job_description = message.text
        print("point 1", message.text)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä CRWO :")
        bot.register_next_step_handler(message, get_ustk_crwo)

def make_own_jdu(message):
    global job_description
    job_description = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä CRWO :")
    bot.register_next_step_handler(message, get_ustk_crwo)



def get_ustk_crwo(message):
    global crwo
    current_log_time = datetime.now().strftime('%d.%m.%Y')
    crwo = message.text
    # bot.send_message(message.chat.id, f"CRWO000000{crwo}")
    print("CRWO000000", crwo)
    global job_type
    current_time = (datetime.now() + timedelta(hours=3)).strftime('%d.%m.%Y %H:%M')
    time_to_arrive = ((datetime.now() + timedelta(hours=2)) + timedelta(hours=3)).strftime('%d.%m.%Y %H:%M')
    bot.send_message(message.chat.id, f"CRWO00000{crwo} / {bs_name}\n"
                                      f"–ê–¥—Ä–µ—Å: {RDB[bs_name]['address']}\n"
                                      f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:{RDB[bs_name]['coordinates']}\n"
                                      f"–¢–∏–ø —Ä–∞–±–æ—Ç: {ustk_job_type}\n"
                                      f"–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç: {job_description}\n"
                                      f"–î–∞—Ç–∞/–≤—Ä–µ–º—è –≤—ã–¥–∞—á–∏ –∑–∞–¥–∞–Ω–∏—è: {current_time}\n"
                                      f"–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: {time_to_arrive}\n"
                                      f"–ü–æ–¥—Ä—è–¥–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è :{PO}\n"
                                      f"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –ú–ú : {message.from_user.last_name}\n"
                     )
    with open(f"data/logs/{current_log_time}.txt", "a") as file:
        file.write(f"{message.from_user.last_name} —Å–æ–∑–¥–∞–≤–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –ë–° {bs_name} –≤ {datetime.now().strftime('%H:%M')}\n")
    print(f"{message.from_user.last_name} —Å–æ–∑–¥–∞–≤–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –ë–° {bs_name} –≤ {datetime.now().strftime('%H:%M')}\n")




def get_another_partner(message):
    bot.send_message(message.chat.id,
                     "–û—Ç–ª–∏—á–Ω–æ, –∫–æ–º–∞–Ω–¥–∞ –≥–æ—Ç–æ–≤–∞! ")
    global partner2
    partner2 = message.text
    print(partner2)
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä  CRWO –∏ –∑–∞—è–≤–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.")
    bot.register_next_step_handler(message, input_crwo)


def input_crwo(message):
    current_log_time = datetime.now().strftime('%d.%m.%Y')
    global crwo
    crwo = message.text
    bot.send_message(message.chat.id, f"CRWO000000{crwo}")
    print("CRWO000000", crwo)
    global job_type
    current_time = (datetime.now() + timedelta(hours=3)).strftime('%d.%m.%Y %H:%M')
    time_to_arrive = ((datetime.now() + timedelta(hours=2)) + timedelta(hours=3)).strftime('%d.%m.%Y %H:%M')
    bot.send_message(message.chat.id, f"CRWO00000{crwo} / {bs_name}\n"
                                      f"–ê–¥—Ä–µ—Å: {RDB[bs_name]['address']}\n"
                                      f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {RDB[bs_name]['coordinates']}\n"
                                      f"–¢–∏–ø —Ä–∞–±–æ—Ç: {job_type}\n"
                                      f"–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç: {job_description}\n"
                                      f"–î–∞—Ç–∞/–≤—Ä–µ–º—è –≤—ã–¥–∞—á–∏ –∑–∞–¥–∞–Ω–∏—è: {current_time}\n"
                                      f"–î–∞—Ç–∞/–≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: {time_to_arrive}\n"
                                      f"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –ú–ú : {partner1},{partner2}"
                     )

    with open(f"data/logs/{current_log_time}.txt", "a") as file:
        file.write(f"{message.from_user.last_name} —Å–æ–∑–¥–∞–≤–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –ë–° {bs_name} –≤ {datetime.now().strftime('%H:%M')}\n")
    print(f"{message.from_user.last_name} —Å–æ–∑–¥–∞–≤–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –ë–° {bs_name} –≤ {datetime.now().strftime('%H:%M')}\n")




try:
    bot.infinity_polling(timeout=10, long_polling_timeout=5)
    # bot.polling(none_stop=True)
except Exception as ex:
    print(ex)
    time.sleep(15)
# bot.infinity_polling
